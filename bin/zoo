#!/usr/bin/env node
// for exe
//     node.exe %~dp0bake %*

// Commander useage: http://nodetoolbox.com/packages/commander

var program = require('commander')
	spawn = require('child_process').spawn,
	util = require('util'),
	path = require('path'),
	fs = require('fs'),
	n2a = require('native2ascii').native2ascii,
	a2n = require('native2ascii').ascii2native,
	lessing = require('../lib/lessing').lessing,
	compress = require('../lib/jsminify').compress,
	mkdirsSync = require('../lib/mkdirs').mkdirsSync,
	kmc = require('kmc'),
	os = require('os');

var rd = require('../lib/utfreading');
var cssmin = require('ycssmin').cssmin;

var exec = require('child_process').exec;
var prompt = require('prompt');

var config = {
	'init':      		false,
	'gruntfile':      	false,
	'addmojo':			false,
	'cssembed':			false,
	'html':				false,
	'Lessing':			false,
	'modulecompiler':	false,
	'minify':			false,
	'minifyOutput':		false
};

program
	.version('0.0.x')
	.option('-i, --init', '初始化Gruntfile.js，和node_modules')
	.option('-g, --gruntfile', '取Gruntfile.js')
	.option('-a, --addmojo', '初始化node_modules\n')

	.option('-c, --cssembed <cssfilename>', '指定css文件，将其中的img引用编译为内置DataURI格式（依赖jdk）')
	.option('-h, --html <htmlfile>','生成HTML模板文件')
	.option('-L, --Lessing','针对当前目录解析less')
	.option('-m, --modulecompiler <modulecompiler>','生成KISSY模块依赖文件，文件会合并，需要给出入口文件')
	.option('-M, --minify <file>','压缩这个文件，传入css或js文件')
	.option('-o, --minifyOutput <output>','压缩(解析文件)输出文件')

	.on('--help',function(){
		var str = [
		'http://github.com/jayli/zoo\n\n',
		' _____\n',
		'/__  /  ____  ____ \n',
		'  / \/  / __ \\/ __\\\n',
		' / /__/ /_/ / /_/ /\n',
		'/____/\\____/\\____/ \n'].join();
		console.log(green(str));
		
	})
	.parse(process.argv);

if(program.init){
	config['init'] = true;
}

if(program.gruntfile){
	config['gruntfile'] = true;
}

if(program.addmojo){
	config['addmojo'] = true;
}

if(program.cssembed){
	config['cssembed'] = program.cssembed;
}

if(program.html){
	config['html'] = program.html;
}

if(program.Lessing){
	config['Lessing'] = true;
}

if(program.minify){
	config['minify'] = program.minify;
}

if(program.minifyOutput){
	config['minifyOutput'] = program.minifyOutput;
}

if(program.modulecompiler){
	config['modulecompiler'] = program.modulecompiler;
}

if(noArgs()){
	error('请指定参数');
}

var slash = isLinux()?'/':'/';

if(config.init){
	exec('curl http://jayli.github.io/tinit.sh | sh',printResult);
	log(yellow('初始化ing...'));
} else if (config.gruntfile){
	if(fs.existsSync(process.env.PWD + slash + 'Gruntfile.js')){
		getGruntfile();
	} else {
		exec('curl http://jayli.github.io/Gruntfile.js > Gruntfile.js',printResult);
	}
} else if (config.gruntfile){
	if(fs.existsSync(process.env.PWD + slash + 'Gruntfile.js')){
		getGruntfile();
	} else {
		exec('curl http://jayli.github.io/Gruntfile.js > Gruntfile.js',printResult);
	}
} else if (config.addmojo){
	exec('curl http://jayli.github.io/tinit_module.sh | sh',printResult);
	log(yellow('模块下载中...'));
} else if (config.cssembed) {
	exec('java -jar '+__dirname + slash + 'cssembed.jar -o '+ config.cssembed + ' ' + config.cssembed,printResult);
	log(yellow('Parsing...'));
} else if (config.html) {
	var getTemFile = function(){
		exec('curl http://jayli.github.io/html5-templete.html > ' + config.html,printResult);
	};
	if(fs.existsSync(process.env.PWD + slash + config.html)){
		ask('是否覆盖'+config.html+'? (yes)、no',getTemFile);
	} else {
		getTemFile();
	}
} else if (config.modulecompiler) {
	mojoCompiler(false,config.output?config.output:'combo.js');
} else if (config.Lessing) {
    lessing(process.env.PWD || process.cwd(), function(){});
} else if (config.minify) {
	if(isJS(config.minify)){
		var output = '';
		if(config.minifyOutput){
			output = config.minifyOutput;
		} else {
			output = config.minify.replace(/([^\.]+)(\.js)$/i,'$1-min.js');
		}
		copyFiles(config.minify,output,new Function);
		compress(output,true);
		(function(){
			var encoding = 'utf8';
			var u = rd.read(output);
			fs.writeFileSync(output,u,'utf8');
			var str = fs.readFileSync(output,'utf8');
			str = n2a(str);
			fs.writeFileSync(output,str,'utf-8');
		})();
	} else {
		var output = '';
		if(config.minifyOutput){
			output = config.minifyOutput;
		} else {
			output = config.minify.replace(/([^\.]+)(\.css)$/i,'$1-min.css');
		}
		copyFiles(config.minify,output,new Function);
		(function(){
			var encoding = 'utf8';
			var u = rd.read(output);
			fs.writeFileSync(output,u,'utf8');
			var str = cssmin(fs.readFileSync(output,'utf8'));
			// str = n2a(str);
			fs.writeFileSync(output,str,'utf-8');
		})();
	}
} else {
	// bake(config);
}

function getGruntfile(){
	prompt.start();
	prompt.get([{
		properties:{
			overwrite:{
				message:'是否覆盖Gruntfile.js? (yes)、no'
			}
		}
	}], function (err, result) {
		if(result.overwrite == '' || result.overwrite == 'yes'){
			exec('curl http://jayli.github.io/Gruntfile.js > Gruntfile.js',printResult);
		} else {
			die();
		}
	});
}

function ask(msg,callback){
	prompt.start();
	prompt.get([{
		properties:{
			overwrite:{
				message:msg
			}
		}
	}], function (err, result) {
		if(result.overwrite == '' || result.overwrite == 'yes'){
			callback();
		} else {

		}
	});
}

function mojoCompiler(sub,output,path){
	if(path === undefined){        
        //console.log(process.env);
		var pwd = process.env.PWD || process.cwd();
	}else{
		var pwd = path;
	}
    
	if(sub){
		fs.readdirSync(pwd).forEach(function(part) {
			var p = path.join(pwd,part);
			var stat = fs.lstatSync(p);
			if(stat.isDirectory()){
				moduleCompilerOneDir(p,output);
			}
		});
	} else {
		moduleCompilerOneDir(pwd,output);
	}
}

function moduleCompilerOneDir(dir,output){
	/*
	var cmd = 'java -cp ' + __dirname + slash + 'module-compiler.jar' + ' com.taobao.f2e.ExtractDependency -baseUrls ' + dir + ' '
				+ '-encodings utf-8 '
				+ '-outputEncoding utf-8 -output ' + dir + slash + output + ' '
				+ '-fixModuleName true';

	exec(cmd,printResult);
	return;
	*/
	function combo(){
		var pathname = path.basename(dir);
		kmc.config({
			packages: [{
				'name': pathname,
				'path': dir,
				'charset': 'utf-8'
			}]
		});
		kmc.build(config['modulecompiler'], output, 'utf-8');
	}

	if(fs.existsSync(process.env.PWD + slash + 'combo.js')){
		ask('是否覆盖combo.js? (yes)、no',combo);
	} else {
		combo();
	}
}

function error(msg){
	log(red('ERROR >> ') + msg);
	die(green('HELP >>\t')+'zoo --help\n');
}

function log(){
	console.log.apply(this,arguments)
}

function die(){
	console.log.apply(this,arguments)
	process.exit();
}

function consoleColor(str,num){
	if (!num) {
		num = '32';
	}
	return "\033[" + num +"m" + str + "\033[0m";
}

function green(str){
	return consoleColor(str,32);
}

function yellow(str){
	return consoleColor(str,33);
}

function red(str){
	return consoleColor(str,31);
}

function blue(str){
	return consoleColor(str,34);
}

function isLinux(){
	if(/win/i.test(os.type())){
		return false;
	}else{
		return true;
	}
}

function printResult(error,stdout,stderr){
	if(stdout != '' ){
		log(green('STDOUT >>') +' \n' + stdout);
	}
	if(stderr != ''){
		log(yellow('STDERR >> ') + stderr);
	}
	if (error !== null) {
		console.log(red('EXECERR >> ')+ error);
	}
}

function isCSS(uri){
	return /\.css$/i.test(uri);
}

function isJS(uri){
	return /\.js$/i.test(uri);
}

function isLESS(uri){
	return /\.less$/i.test(uri);
}

function copyFiles(from,to,cb) {
	log(green('COPY >> ') + from + blue(' > ')+ to);

	// TODO 
	var rd = fs.readFileSync(from);
	var dp = path.dirname(to);

	if(!fs.existsSync(dp)){
		mkdirsSync(dp);
	}
	doRest();

	function doRest(){
		try{
			var fp = fs.statSync(to);
		}catch(e){}

		if( fp!==undefined && fp.isFile() ){
			fs.unlinkSync(to);
		}

		fs.writeFileSync(to,rd);
		cb();
	}
}

function noArgs(){
	var flag = false;
	for(var i in process.argv){
		if(process.argv[i].indexOf('-') >= 0){
			flag = true;
			break;
		}
	}
	return !flag;
}
